패켓의 딜레이와 정보 손실이 왜 일어나는 것이냐

	스토어엔 프로시드 때문에 그렇다.

4가지 소스의 패켓 딜레이

d(nodal) = d(proc) + d(queue) + d(trans) + d(prop)

패캣
A >                             transmission전송 딜레이
      >         /라우터/버퍼                <propagation >전파 딜레이   /라우터/버퍼
B >         <processing>처리 딜레이
 			queueing 도착해서 빠져나가는 딜레이

nodal 총 딜레이

nodal = proccessing + queueing + transmisson + propagation
총 지연 = 처리 지연 + 큐잉 지연 + 전송 지연 + 전파 지연

패켓
	라우터		라우터
패켓

라운터/버퍼의 메모리는 한정되어있기 때문에 메모리 처리까지 queueing 이 일어나고 지연이 일어난다.
전송, 전파, 처리 과정에서도 지연이 일어난다.

하나의 노드에서 걸리는 총 지연 > nodal 딜레이

질문하나 할까요 여러분이 이해했느지

	딜레이는 좋은거에요 나쁜거에요? 당연히 나쁜거죠
	그러면 여기서 어떤 값을 줄일수 있나요? 
	트랜스미션, 프로파게이션은 이미 정해져있다.
	큐잉,프로세싱 은 매니저블하다. 

다시 언급하는 큐잉 딜레이(중요하다)
	 y축이 딜레이고 x축이 트래픽 강도(전송하는 패캣의 양)
	1의 가까워질수록 폭발적으로 그래프가 증가한다.
	R: 링크 밴드윋쓰(bps)
	L: 패캣 랭쓰(bits)
	a: 에버리지 페켓 어라이벌 레이트
	외울필요는 없지만 La/R 
	어떤 값안에 바운드 시키려면 분모를 늘리거나 분자를 줄여야 한다.
	하지만 링크 밴드윋쓰(광섬유 이딴거) const 이다. 상수야 못바꿔 ( 과학의 진보 아니면)
	패캣 랭쓰도 상수야 못바꿔 기븐 넘버야 기분말고 given
	
	프로티컬의 두가지 정의가 중요하다 다시 한번 외워라 시험에 나온다

	그러면 평균 패켓 도착률을 낮춰야 하는 것입니다. (사용률)



1.5 절
	프로토콜 레이어

	-시험을 볼꺼면 프로토콜 7계층 표를 만들어야한다.
	왜 나누어놨냐?
	각 계층별로 제공하는 서비스가 다르단 말이야~
	각 계층별로 고유한 서비스들이 있다.
	복잡한 시스템을 다루기 위해
	모듈화가 시스템의 유지,업데이트가 편하게하기위해
	-레이어 서비스 트랜스태런드의 구현 변화 시스템의 나머지로
	
		실제 프로트콜의 예			목적
	application - FTP,SMTP,HTTP
	presentation - 뒤에 확장자 붙는거(.mp4)	
	session
	transport - TCP, UDP			process to process delivery(communicatopn)	
	network	- IP, RIP, OSPF			end[node(host)] to end[node(host)] delivery(communication)
	link 0 Ethernet, 802.11, PPP, HDLC, 802.3	hope(node) to hope(node) delivery(communication)
	physical

Encapsulation	캡슐화
Decapsulation 	캡슐화 제거

네트워크 보안
Netwrok Security

	virus	: self - replicating infection 스스로 복제하는 감염 (e-mail attachment) 스스로 실행가능
	worm	: self - replicating infection 					실행을 시켜야 실행
	spyware
	sniffing	: 코를 킁킁거리며 냄새를 맡는다, 패캣 스니핑 > 패켓 단위로 들여다보는거(정보 유출)
		wireshark > 유명한 스니핑 툴
	IP spoofing : 가짜 소스 주소로 패켓을 보낸다.
	Dos(디나잉 오브 서비스)
			이런게 뭔지 알아야한다.

	3P 를 지켜야한다.
	3P:CIA	Confidentiality(기밀성)	Integrity(무결성)		Avaliablity(가용성)
		<> Exposure(노출)		<>Modification(수정)	<>unavaliablity(사용불가능)
					Alternation(수정)

Internet history
		> tele-communication 전화망	1:1	양방향
	통신(망)	> broadcast-communication 방송망	1:n	단방향
		> data-communication 데이터망	n:n	양방향,단방향 

	열심히 살아라
	

Chapter2 : 어플리케이션 레이어

우리의 목표
	설계, 구현   						신택스 / 시맨틱스 / 타이밍
								이벤트 / 액션 / 포맷

네트워크 앱 만들기
	write program
	네트워크 코어 장치를 위해 write 할 필요는 없다.

어플리케이션 아키택쳐
	서버 : 항상 켜져있는 호스트
		permanent IP address   public  <> private			return
	클라이언트 : 서버와 통신한다.					request
		    클라이언트 끼리 직접 통신하지 않는다.

	차후에 P2P 가 나왔다.

P2P 아키택쳐
	항상 켜져있을 필요는 없다.

프로세시스 커뮤니케이팅(통신하는 프로세스들)
	process : 한 호스트 내에 실행중인 프로그램
	같은 호스트에서 다른 프로세스끼리 통신 > ipc(OS의 영역이다)  // 다루지 않을 것이다.
	다른 호스트에서 프로세스의 통신 (메세지의 교환을 통해)

	client process	: 요청
	server process 	: 응답, 반환
	

	





