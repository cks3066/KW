Machine-Level Programming II: Control Flow

조건문 루프문

Condition Codes

Single Bit Registers

CF	Carry Flag	SF	Sign Flag
ZF	Zero Flag		OF	Overflow Flag


cmpare

cmp가 나옵니다. 

cmp1 Src2,Src1
	a - b
캐리 발생시	CF 
a == b		ZF 
(a-b) < 0		SF 
two’s complement overflow
(a>0 && b<0 && (a-b)<0) || (a<0 && b>0 && (a-b)>0)		OF 

test1 Src2.Src1
	Src1 & Src2

a&b == 0	ZF
a&b < 0		SF

결과값을 기반으로 
SetX 기반 명령어 수행가능
set / e,ne,  s,ns, g,ge, l,le, a, b

e	ZF		a = b	같으면 / 0이면
ne	~ZF		a != b 	같지 않거나 / 0이 아니면
s	SF		a - b < 0	  a-b 가 음수면
ns	~SF		a - b >= 0  a-b가 음수가 아니면
g	~(SF^OF)&~ZF	a > b
ge	~(SF^OF)		a >= b
l	(SF^OF)		a < b
le	(SF^OF) | ZF	a <= b
a	~CF&~ZF
b 	CF
----------------------
int gt (int x, int y)
{
  return x > y;
}

movl 12(%ebp),%eax	# eax = y
cmpl %eax,8(%ebp)	# Compare x : y
setg %al		# al = x > y
movzbl %al,%eax	# Zero rest of %eax

---------------------
Jumping

j / mp, e,ne, s,ns, g,ge, l,le, a,b

--------------------------
int max(int x, int y)
{
  if (x > y)
    return x;
  else
    return y;
}

_max:
	pushl %ebp				//
	movl %esp,%ebp				// Set Up

	movl 8(%ebp),%edx   // edx = x		//
	movl 12(%ebp),%eax  // eax = y		//
   	cmpl %eax,%edx				// Body	
	jle L9					//
	movl %edx,%eax      // eax = x		//
L9:				eax : returned value
	movl %ebp,%esp				//
	popl %ebp				// Finish
	ret					//

----------------------
어셈블리의 루프문 활용을 위해선 goto문에 익숙해져야한다.

"Do-While"
--C Code
int fact_do
  (int x)
{
  int result = 1;
  do {
    result *= x;
    x = x-1;
  } while (x > 1);
  return result;
}

--Goto Version
int fact_goto(int x)
{
  int result = 1;
loop:
  result *= x;
  x = x-1;
  if (x > 1)
    goto loop;
  return result;
}

"While"
--C Code
int fact_while
  (int x)
{
  int result = 1;
  while (x > 1) {
    result *= x;
    x = x-1;
  };
  return result;
}

--Goto Version
int fact_while_goto
  (int x)
{
  int result = 1;
loop:
  if (!(x > 1))
    goto done;  
  result *= x;
  x = x-1;
  goto loop;
done:
  return result;
}

-------------------여기서 마친다고?