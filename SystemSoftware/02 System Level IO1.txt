02 System Level IO1

시스템 레벨 IO

disk 하고 cpu 하고 어떠한 연관성이 있는지 살펴볼거다.

CPU ( 인텔과 암드에서 만들죠)
	ALU ( +,-,x, 등등)
	bus interface (bus라는 것은 채널들끼리 연결해주는 연결점,패스 (와이어) )
[CPU < 시스템 버스 > I/O 브릿지]
I/O 브릿지
[I/O 브맂시 < 메모리 버스 >메인 메모리]
메인메모리
	컴포너트
[I/O 브릿지 < I/O 버스 > USB 컨트롤러(마우스,키보드) / 그래픽 어텝터(모니터) / 디스크 컨트롤러(디스크) ]
CPU 명령 DISK 저장 

디스크 스트럭쳐 ( 디스크 구조 )
	SSD ( 솔리드 스테이트 디스크 ) [반도체 디스크] [아주 빠른 속도, 비싼 가격, 제한된 용량] 
	HDD (하드 디스크) [대용량, 가격저렴]
		내부적으로 플레트(원판)이 여러개가 붙어있음
		모터로 플레트 회전 > 회전속도 RPM (분당 회전 속도) [7200 / 10000 rpm 주로 사용]
		저장, 읽기를 안해도 하드디스크가 계~속 돌아가고 있음
		이때 팔(arm)을 이용하면 [LP판 생각하면 됨] 데이터 읽을 수 있음
			내부적으로 플레트에 존재하는 트랙(많음)
			트랙당 512바이트 저장 가능
		중간 기둥(스핀들)(spindle) (플레트가 회전 할수 있도록 모터로 인해 돌아감)
		arm도 트랙별로 하나씩 있음 [뾰족한 바늘이 달려있음] > 이게 망가지면 데이터 손상
		
		스핀들로 인해서 플레트의 회전, 데이터가 저장된 위치의 트랙이 arm에 오면 arm이 내려가서
		데이터를 읽게 됨 ( 이 기계적인 속도가 반도체를 따라갈 수는 없음 )
		
		하드 디스크의 저장단위는 무조건 한 섹터단위인 512바이트 이다.

디스크에서 한 섹터를 읽는 과정
	step1, CPU의 버스 인터페이스 명령 > 디스크 컨트롤러 > "데이터를 읽어와라!"
	step2, 디스크 컨트롤러(CPU와 메모리의 제어)가 명령어를 읽어서 메모리로 이동(메모리에 데이터 저장) 
		cpu엔 512바이트만큼 저장할 공간이 없기 때문에 메인 메모리로 이동해서 저장
	step3, 디스크 컨트롤러가 CPU에 메모리에 데이터를 저장했다고 알림 (이벤트 인터럽트(event interrupt))
	(CPU > 디스크 컨트롤러 > 디스크 > 디스크 컨트롤러 > 메인 메모리 > 디스크 컨트롤러 > CPU)