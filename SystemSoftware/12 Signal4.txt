Unix Process Hierarchy(유닉스 프로세스 계층)
			[0] 태초
			init[1]
	Daemon 	|	
			Login shell
	child		child		child
		grandchild 	grandchild
 step 1
부팅을 하게 되면 boot/vmlinux 커널 실행
접근, 종료 할수 없는 0 프로세스 실행 (OS내부에서 돌아가는 프로세스)
0번의 child 로 init[1] 프로세스 실행 [/sbin/init]
 step 2
/etc/inittab 이라는 파일이있는데 여기에 부팅할떄 실행하고자 하는 daemon (백그라운드 실행 시스템 프로세스)
이 있음 ftpd, httpd 등 (네트워크같은거)
그 뒤 init[1] 은 child 로 getty 실행
 step 3
 getty 는 login 프로세스를 실행해요. getty 는 login 으로 바뀌게 되요
 여기서는 child 를 만들지 않고(fork 하지않고) excelc(tcsh) tcsh 를 실행하게 되요

 shell 에서는 sh[오리지널 유닉스 bourne 쉘] , csh(tcsh)[bsd unix c shell, tcsh] ,bash [bourne-again shell]
 가 있어용
	shell 의 루틴 설명.. 이해못함

Process Groups
시스템에서 모든 프로세스는 하나의 프로세스 그룹에 무조건 속해있어요
이떄 one process group의 아이디는 pgid라고해요.

for-ground job		back ground job
pid = 20			pid = 32
pgid = 20		pgid = 32
|	|
child	child

getpgid() 함수를 이용해서 pgid 의 번호를 가져온다.
pid와 pgid 가 동일한 프로세스가 형성된다.

setpgid(pid_t pid, pid_t pgid) 함수를 통해서
새로운 프로세스 그룹을 생성하거나 다른 프로세스 그룹으로 등록할 수 가 있다.

pid = 20
pgid = 20 인 프로세스 그룹이있다.
여기서 child 2개를 생성한다.
그러면 두 child 프로세스의 pgid 는 20이 된다.

setpgid(20,30)	// pid = 20 pgid = 30
id 20을 가진 프로세스를 pgid 30에 해당하는 그룹으로 바꾸겠다.

setpgid(20,0)
pgid인자를 0으로하면 pid = 20 인 프로세스를 리더로 하는 새로운 프로세스 그룹을 생성하겠다.
이전의 pgid를 가지고있던 child의 그룹과는 독립적인 관계가 된다. [그룹의 관점에서]

kill 사용 > 종료 함수
kill -9 24818
24818 종료
kill -9 -24818
24818 프로세스 그룹에 포함된 모든 프로세스 종료

시그널 내부에 대해서 좀 살펴볼게요
	
p2 -> p1	           	시그널INT
kernel (OS)	  ^
keyboard		ctrl c 입력

read runnung waiting
	중간중간 시그널이 들어왔는지 검사함
	검사하는 방법은 어떻게 되면
	프로세스 별로 두개의 루트가 있어요
	내부적으로..
P1			[오른쪽부터 왼쪽으로]
	pending list	제일 낮은 비트부터 팬딩 리스트를 검사함 [발견시 시그널 디폴트 혹은 핸들러 시행]
	block list		0으로 설정되어있음   > 블록 리스트에 등록 1
					   |
sigprocmask(SIG_BLOCK, SIGINT))   -----------------
	block list 에서 pending list 와 대응하는 순서의 block list 가 1이면 unblock 까지 기다린다.

시그널은 queeing 되지 않는다.
줄을 서지 않는다.

p2				p1
kill(p1, SIGINT)			SIGINT 핸들러 등록			
kill(p1, SIGINT)

	동작되는 핸들러는 1번이다
즉 시그널은 큐잉이 불가능하다. [중요한 시그널을 놓칠 수 있다.]