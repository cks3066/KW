IPC2

Virtual Address Space

			   page table	      page table
		   	   for procees1	      for procees2
	Register			|	[]	|	Register		
	[]			|	[]	|	[]
	[Stack]		      >	|	[]	|     <	[Stack]	
	[]			|	[]	|	[]
	[Heap(malloc)]	      >	|	[]	|     <	[Heap(malloc)]
	[Data(global variable)]	|	[]	|	[Data(global variable)]
	[Text(code)]	      >	|	[]	|     <	[Text(code)]
				   Physical memory
	  			    (main memory)
      Virtual address space(process 1)			   Virtual address space(process 2)

Shared Memory

			   page table	      page table
		   	   for procees1	      for procees2
	Register			|	[]	|	Register		
	[]			|	[]	|	[]
	[Shared momory]	      >	|	[]	|     <	[Shared momory]  - 바로 접근가능
	[]			|	[]	|	[]
	[]			|	[]	|	[]
	[]			|	[]	|	[]
	[]			|	[]	|	[]
	[Stack]		      >	|	[]	|     <	[Stack]	
	[]			|	[]	|	[]
	[Heap(malloc)]	      >	|	[]	|     <	[Heap(malloc)]
	[Data(global variable)]	|	[]	|	[Data(global variable)]
	[Text(code)]	      >	|	[]	|     <	[Text(code)]
				   Physical memory
	  			    (main memory)
      Virtual address space(process 1)			   Virtual address space(process 2)


Procedure of Using Shared Memory

	Common chunk of read/write memory
		among processes
	
		          Shared Memory
		    |	(unique key)	|
	(1)create	    |			|
ptr	->	    |			|	<-	  ptr
	(2) attach	    |			|	(2)attach	
prc1		    |___________________________|		  prc2
			  ^	^			
		(2) attach	   |         |
			prc3      prc4     	

Creating Shared Memory
	int shmget(key_t key, size_t size, int shmflg);
	 shared memory 생성하는 함수

	#define PERMS (S IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH)
	#define KEY ((key_t)99887)
	shmid = shmget(KEY, 1024, PERMS | IPC_CREAT);

	shmid는 segment에 접근하기 위한 local id이다.
	key는 무엇이냐	= 고유한 id 시스템 전체에서 이 segment에 대해서 고유한 넘버를 주기위한 값
	
IPC Key
	정의
		키는 UNIX 시스템의 IPC 객체를 식별하기위한 숫자이다.

			p1 p2 가 공유메모리를 0의 키값을 이용해서 공유하고있었다
			p3 p4 가 서로 데이터를 공유하기위해서 shmget함수를 통해 같은 키값으로
			공유메모리에 접근하였다. 그러면 p1 p2 에게도 같은 메모리가 실수로
			누설될수있다.
	역할
		Key allows IPC objects to be shared by several processes

File Name vs Key Number
	FIFO의 경우는 한번 채널을 생성하면 파일이름을 통해 접근한다.

	Segment의 경우는 key값을 통해 접근한다.
	공유메모리에 고유한 키를 부여해서 특정 세그먼트를 나누고 서로 통신하고자 하는 
	프로세스끼리 그 키값에 할당된 영역에만 접근하여 통신,공유함

Pick a Key Value
	key_t ftok(const char *path, int id);
	[the funtions allows independent processes to derive the same key based on a known pathname]
	[the path must refer to an existing file.]
	
	key_t key;
	int shmid;
	
	key = ftok("/home/tmp/a.c", 'A');
	
	shmid = shmget(key, 1024, 0644 | IPC_CREAT);	

	파일패스를 가지고 key값을 생성한다. [중복되지 않는 키값을 사용하고 싶을때]

	- directly 한게 직접 key값을 줄 수 있지만 중복의 위험이 있음

Attaching Shared Memory	[FIFO 에서 open과 비슷하다]

	void *shmat(int shmid, void *addr, int shmflg);
	
	return 되는 값은 시작메모리의 주소이다. [malloc 에서 메모리의 주소를 반환받는거와 같음]

	ptr = malloc(1024)
	하면 DRAM 상에 영역을 create 하고 버츄어머신 ptr에 attach 를 통해 DRAM의 공간과 연결하게 된다.

	ptr = shmat(shmid,0,0)
	마찬가지고 버츄어주소공간에서 ptr과 DRAM상의 segment와 연결된다.
	
	여기서 ptr은 DRAM  상에 있는 메모리 주소가 아니고 process의 virtual address space에 있는 주소
	DRAM 상에 있는 메모리의 주소는 여러분이 접근할 수도 없고 알수도 없다.

Example
	process 0				process 1
	
	key_t key;				key_t key;
	int shmid;				int shmid;
	char *data;				char *data;	

	key = ftok("/home/myshm", 'A');		key = ftok("/home/myshm", 'A');
	shmid = shmget(key, 1024, 0644);		shmid = shmget(key, 1024, 0644(;
	data = shmat(shmid, (void *)0, 0);		data = shmat(shmid, (void *)0, 0);
	for (i = 0; i < 1024 i++)			for (i = 0; i < 1024 i++)
		data[i] = i;				printf("data[%d] : %d\n",
	...							i, data[i]);
						...
	shmdt(data);				shmdt(data);

	(1) what if the segment is detached when process 1 is accessing data in the segment?
		만약 process1 이 segment의 데이터 접근중 segment가 detached된다면?
		
		>detached는 deleted가 아니기 때문에 접근가능한 데이터는 남아있다.
		즉 process1은 아무영향을 받지 않는다.

	(2) what if process 1 starts before process 0 do?
		process1이 process0보다 먼저 시작됐다면?

		>printf에서 출력해야할 data[i]값이 없기때문에 출력에서 오동작이 날 수 있다.
		이 문제를 해결하는게 동기화이고 shared memory에선 동기화를 잘 해주기 어렵다.

Detach and Delete Shared Memory
int shmdt(const void *shmaddr);
	삭제 X 접근만 풀어줌

shmctl((shmid, IPV_RMID, NULL);
	mark the segment to be deleted
	삭제할 세그먼트를 마킹한다.
	the segment will only actually be destroyed after the last process detaches it
	모든 프로세스들이 detach된 후에 delete 된다.