exceptional control flow

process states 프로그램의 상태

프로세스의 생명주기 	 new			zombie
				read	running
				     wating
PROCESS STATE
    CODES
wating	D	uninterruptible sleep (usually IO)	[ IO 상태에서 이벤트를 기다리는것]
ready	R	runnable (on run queue)
wating	S	sleeping [sleep]
일시정지	T	traced or stopped
zombie	Z	a defunct ("zombie) process

	D/S 는 wating 상태

좀비 상태에 대해서 살펴볼게요

프로세스가 exit 함수를 받아 좀비 상태가 되면
이 프로세스를 사용하는 자원이 깨끗하게 청소가 안되는 상황이 발생할 수 있어요
그러면 시스템의 부하가 생길 수 있어요

최대 실행될 수 있는 좀비 프로세스를 제한하고 그 다음은 fork 가 불가능하게 할 수 있다.

이 좀비들을 수확하는 것을 reaping 이라고 합니다.
남은 좀비들을 싹 정리해버리는 것이죠

만약 부모가 reap하지 않는다면?
만약 어떠한 부모 프로세스가 자식프로세스의 reapong 없이 종료된다면 프로세스안에 계속 남아 있을 것이다. 

defunct 라 표시가 된다면 좀비인 상태를 나타내는 것입니다.
그 상태에서 parent 를 죽이게 되면
child를 청소해주는 parent 행위를 불러오는 시스템콜을 불러오지 않게 된다면
고아가 된 좀비는 init 프로세스가 청소하게 된다.

이번에는 반대로 child 가 무한루프를 돌고있고 부모가 죽었다면
이 child 를 강제로 종료시켰을때 init이 좀비상태의 child를 청소하게 된다.

즉 두 경우 모두 init 프로세스가 좀비상태의 child를 reaping 하게 된다는 것이다.

여기서 강조하는 것은 좀비상태의child를 init 프로세서가 관리한다는 것이다.

여기서 중요한 함수가 나와는데 바로 wait 함수에요

child 함수가 죽을때까지 현재 프로세스가 기다리는 함수에요

wait(int *child_status)
if child_status != NULL,

차일드 상태를 알고 싶은게 아니라면 NULL을 넣어도 무방하다.

int child_status 변수 선언( 차일드 상태를 알기 위해)

만약 포크 반환값이 차일드라면
	헬로 프롬 파일드 출력
그게 아니라면
	헬로 프롬 페어런트 출력
	웨이트(차일드상태 주소[참조])
	차일드 끝! 출력
바이 출력
종료

웨이트 함수를 만나면 차일드가 끝나기까지 기다립니다.

p  		c

어떤 것도 먼저 시행될 수 있다 이건 중요한 것은 아니다
wait가 없다면 바로 다음 소스를 시행하지만
wait이 있다면 child 프로세스가 끝날때까지 기다렸다가 소스를 시행한다.

소스의 플로우가 살짝 변한다

wait 예시
void fork10()
pid_t pid[n]; N개의 pid 공간 생성
child_상태 인자용 생성
exit(인자로 100 99 98 97 ... ) 이렇게 들어감
for (i = 0; i < n; i+=)
pid_t wpid = wait(&child_status))
웨이트해서 기다리다가 child 0번이 종료된다면 
n-1번 반복하겠다는거에요

wpid 에서는 종료된 child 의 pid 를 반환하게 돼요

WIFEXITED 이것은 존나 모르겠어요 그니깐 하루죙일 설명해도 모를거가아요ㅕ
WEXITSTATUS 이 함수도 처음보는 함수고 갑자기 이렇게 사용해버리면
이해하기 조차 힘들어요!
제가 대충 이해한 바는 exit()함수에 넣어준 값을 받을 때 사용한다는 것을 알겠어요
WIFEXIT(status) 이것을 만약에 exit으로 종료되면 ture, 아니면 false가 반환
EXIT에 넣은 값을 받아노느거 WEXITSTATUS 이렇게 쓴다

wait을 뭐하는 건지 살펴봤는데
parent는 wait() 함수를 불러와서 child를 종료시켜요
그니깐 이것은 reaping 함수라고 할 수 있어요!

waitpid 라는 것이 있어요
wait 함수의 변종이에요

얘는 뭐냐면
첫번째 인자의 child 가 죽을때까지 기다리는 것이에요
첫번째 인자로 지정한 프로세스가 죽을때까지 기다린다는 것이에요
원래 wait()는 어떠한 자식이 뒤져도 wait함수를 빠져나오게 되는데
이것은 내가 지정한 pid 의 자식이 뒤질때까지 끝까지 기다린다는 것을 알수가 있어요
그래서 pid[n]이라는 배열을 만들었던거에요
waitpid(pid[i], &child_statis, 0); 
이런식으로 사용할거에요 0은 옵션중하나에요
pid[i] = fork() 이렇게 하면 pid 의 배열에 부모함술라면 그 자식함수의 pid 가 들어가게 되있잖아요

특정한 자식 프로세스가 끝날때까지 기다리는 것이 waitpid 이다
첫번쨰 인자로 pid 의 값을 넣어야 작동한다.
wiat() 보다는 사용법이 살짝 복잡하지만  

wait/waitpid example option

using wait(fork10)
3565	103
3564	102
3563	101	
3562	100	
3566	104

using waitwid(fork11)
3567	100
3568	101
3569	102
3570	103
3571	104

차일드가 죽는 순서는 wait을 이용했을때 무작위로 죽게됩니다.


exec : Running new programs
execute의 앞부분 즉 실행

int exec 함수가 여러개 있는데
그 첫번쨰가

int execl(char *path, char *arg0, char *arg1, ..., 0)
execute list
로드하고 실행한다 실행가능한 것을 패스에서 인자들과 함께
패스는 완성된 패스이다 실행가능한 파일
arg0 은 된다 프로세스의 이름이
execl("\uer\bin\cp", "cp", "foo", "bar", 0)
프로세스의 이름을 부여하기위해 프로세스의 이름을 넣어준다.
cp foo bar 커맨드 실행
첫번째 인자 - 패쓰
'cp' 'foo' 'bar', 
cp foo bar 를 시행하고 마지막인자 0
그래서 이 함수의 동작은 이래요
메인의 parent가 있어요
포크했을때 차일드가 생성됩니다.
함수 시행
cp foo bar 명령어 실행
실행이 되고나면 종료가되요
wait하고있어요 child 프로세스가 끝날때까지
그렇게 차일드가 끝나면 카피 컴플릿 외치고 끝나요
exit까지 명령어를 만드는 함수이다. 

이렇게 하지않고
그냥 현재 프로세스에서 fork 함수를 이용하지 않고
execl("패쓰", "cp", "foo", "bar", 0) 
이런식으로 사용할 수 있지만
일반적으로 exec 종류의 함수를 사용할떄에는 fork 함수를 이용하여 자식 프로세스에서
실행이 되도록 한다.
