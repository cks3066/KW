Synchronization 동기화

우리가 멀티 프로세싱 또는 멀티 테스킹 또는 멀티 쓰레딩에서
가장 어려운 문제가 동기화입니다.

하지만 우리가 멀티 테스킹 프로그래밍 하다보면 노하우가 생겨서 이러한 동기화 문제를 쉽게 해결할 수 있어요

쓰레드1과 쓰레드2가
같은 전역변수를 사용하고 있을때
서로 전역변수의 값을 변경하고 있을때
실행순서에 따라 프로그램이 출력하는 값이 다를 수 있습니다.
이러한 일관성 없는 프로그램은 문제를 유발할 수 있는데
(프로그램은 항상 고정된 역할을 수행해야합니다.)
이것이 동기화가 되지 않은 문제입니다.

Race condition (= data race)
	여러개의 테스크가 동일한 데이터를 사용할 때 데이터의 접근 순서에 따라 결과값이 달라지는 상황

critical section
	공유데이터에 접근하는 영역(테스크에서 전역변수등에 접근하는 부분)

Synchronization
	병렬적인 실행에서 발생하는 race condition을 피하기위해 실행순서를 제어하는 프로토콜
	쓰레드 뿐만 아니라 쉐어드 메모리를 사용하는 프로세스간의 race condition도 피하기 위해 사용

방법
	Mutex (or Lock)
	Semaphore

현실 세계의 동기화
-폰부스	
-화장실
		문을 열고 들어갔으면 잠금장치를 통해 다른 사람이 들어오지 못하도록 막아줌


Mutex(=Locks, Latches) 잠금장치
	mutual exclusion - 상호 배제 [독점]

	locked state	[holds, own]		-> unlock 될때까지 다른 쓰레드는 sleep 됨
	unlocked state  	[open]						wait 상태[대기]
	두가지 상태

POSIX Mutex-related Functions
	int pthread_mutex_init(pthread_mutex_t *restrict mutex,); 
	int pthread_mutex_destroy(pthread_mutex_t *mutex); 
	int pthread_mutex_lock(pthread_mutex_t *mutex); 
	int pthread_mutex_trylock(pthread_mutex_t *mutex);
	int pthread_mutex_unlock(pthread_mutex_t *mutex);
	다양하 함수 제공

Mutex and Shared Variables
critical section에 들어가기 전에 mutex를 lock하고 작업 수행후 unlock 한다.
[lock -> execution  -> unlock]
unlock은 mutex의 owner만 시행할 수 있고
잠긴걸 다시 잠글 수 없으며 열린것을 다시 열수 없다.

Mutex 초기화
	#include <pthread.h>

 	pthread_mutex_t mymutex =  PTHREAD_MUTEX_INITIALIZER; 
	전역변수로 선언

Locking via Mutex

	#include <pthread.h>

	pthread_mutex_t mylock = PTHREAD_MUTEX_INITIALIZER; 
	pthread_mutex_lock(&mylock); //다른 테스크가 사용하고있으면 sleep 상태로 대기한다.
	/* critical section */ 
	pthread_mutex_unlock(&mylock);
	----------------------------------------------------------------
	#include <pthread.h>

	pthread_mutex_t mylock = PTHREAD_MUTEX_INITIALIZER; 
	pthread_mutex_trylock(&mylock); //다른 테스크가 사용하고있으면 sleep 상태로 대기하지 않고 
				        다른 작업을 먼저 행동한다. 그 뒤 다시 trylock을 시행한다.
	/* critical section */ 
	pthread_mutex_unlock(&mylock);

Unlocking via Mutex
	lock = acquire
	unlock = release

------------------------------------------------------------
Semaphore	세마포어
	동기화와 상호배제를 지원흐는 커널 오브젝트

token count 값을 지원한다.
세마포어를 생성할떄 token count를 인자로 넣을 수 있는데
이는 semaphore 사용시 1씩 감소시켜 사용 한도를 조작할 수 있다.
토큰 카운트가 0인 경우 wait함수를 호출하여 
토큰 카운트가 1이 될때까지 block 한다.

wait과 시그널함수의 구현을 살펴보아야 한다.

wait and signal operation can be simply implemented by busy-waiting(or loop, spin) 
operations, where CPU is busy, but does not do any useful works.

wait (semaphore_t* sp) { 
      if (sp->count > 0)
          sp->count--;     
      else {
         while (sp->count <= 0) ; // no-op
         sp->count--;
       }
}

signal (semaphore_t* sp) { 
        sp->count++;
}

token count = 1 인 경우 Binary semaphore 라고하고 mutex(lock) 과 실행방식이 비슷하다

mutex를 지원하지 않은 OS에선 semaphore 를 이용하도록 한다.
------------------
token count 가 1보다 큰 경우 Counting semaphore 라고 한다.

task1<->			    	    memory region0
task2<->		-counting semaphore{ 
task3<->				    memory region1
	메모리의 영역이 더 많은 경우 학부생 수준에선 잘 사용 X
------------------------------------
Example: Programming Binary Semaphore 
	wait(&S); 	/* entry section or gatekeeper */ 
	<critical section> 
	signal(&S); 	/* exit section */ 
	<remainder section> 
----------------------------------
Named Semaphore
	POSIX 계열의 세마포어

Creating/Opening Named Semaphore
	sem_t *sem_open(const char *name, int oflag, int mode, int value)
	
   	mutex = sem_open(SEM_NAME,O_CREAT,0644,1); 
	플래그에서 O_CREAT가 명시되고 세마포어가 생성되지 않았다면
	count값으로 세마포어를 생서함
	하지만 이미 생성되어 있고 O_CREAT가 명시되어 있다면 
	count 초기화를 하지 않음

	mutex = sem_open(SEM_NAME,0,0644,0);
	O_CREAT가 명시되지 않았기 때문에 단지 접근만 허용됨. 
	Semaphore count 설정 불가능. 임의의 숫자 0을 count 값으로 설정

Closing/Removing a Semaphore
	Named semaphores must be closed to get rid of them.
	 int sem_close(sem_t *sem); 

	int sem_unlink(const char *name); 
		It performs the removal of the named semaphore from the system 
		after all processes have closed the named semaphore.

Semaphore Operations
	Wait operation
	int sem_wait(sem_t *sem); 
	int sem_trywait(sem_t *sem); 
	Note: sem_wait blocks calling thread when attempting to decrement a zero-valued semaphore. 
	But sem_trywait function returns –1 and sets errno to EAGAIN 
	when attempting to decrement a zero-valued semaphore.

	Signal operation
	int sem_post(sem_t *sem); 

	
	