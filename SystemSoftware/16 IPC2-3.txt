IPC

Message Queue
	메세지 큐는 mailbox로 부른다.

  

		101동 1001호			아빠 A
				 	->	[]
		우체통
						엄마 B
						[]
아빠친구	       ->   			  
엄마친구	       ->					나 C
					->	[]

						동생 D
						[]

	 send				receive

		우체통 하나는 단방향 통신
		[메일에 주소와 이름을 적어 보내줌]

-------------------------------------------------------------------------------------pipe와 fifo의 원리

Create Message Queue 메세지 큐 생성
	
	int msgget(key_t key, int msgflg);
		this creates(or open) a message queue.
		key and msgflag argument are similar to those of shmget()

	#define PERMS (S_IRUSR | S_IWUSR)

	int msqid;
	if ((msqid = migget(IPC_PRIVATE< PERMS | IPCP_CREATE)) == -1)
		perror("failed to create new private message queue");

Send a Message

	int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);

	--
	#define MSG_TEXT_SIZE 20

	struct mymsg{		// 우편봉투
		long type;		// message type	// 우편 종류
		char mtext[MSG_TEXT_SIZE];		//message text(or body)	// 우편내용
	} mymsg_t;	
	--
	sbuf(addr):mymsg_t			rbuf(addr):mymsg_t
	TYPE2					empty
	[Type][	Data	]			[Type][	Data	]
	4byte	20byte(data_size)			4byte	20byte(data_size)	

Sender:	 msgsnd(qid,&sbuf,data_size,0)
Receiver:	 msgrcv(qid,&rbuf,data_size,TYPE2,0)

----------------------------------------------
Procedures for Sending Operation

Step1: 메세지 포맷 정의
Step2: mbuf에 메세지 포맷 할당
Step3: mbuf에 있는 내용 mtext 멤버로 복사
Step4: mbuf의 타입 mtype 멤버로 설정
Step5: 메세지 전송
Step6: mbuf 해제

------------------------------------------
	Sender

#include <sys/msg.h>

int result;
int msgid;
struct message {
	long type;
	char text[20];
} mymsg;
mymsg msg;
msg.type = 1;
strcpy(msg.text, "This is message 1");
result = megsnd(msqid, (void *) &msg, sizeof(msg.text). 0);
...

---------------------------------------------------
Receive Message

	ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg);

----------------------------------------------------------
	Receiver

#include <sys/msg.h>

int result;
int msgid;
struct message {
	long type;
	char text[20];
} mymsg;
mymsg_t* msg;
...
msg = malloc(sizeof(mymsg_t));
result = msgrcv(msqid, msg, 20, 1, 0);
...
---------------------------------------------------------
msgtype
0이 될 수 있고 0보다 크거나 작을 수 있다.

msgtyp = 0 > 아무 타입이나 받겠다. 메세지 큐에 들어있는 데이터중 타입 상관없이 맨앞에 있는 데이터 받음
[엄마,아빠,나,동생이든 뭐든 우편이 들어있으면 바로 받겠다]
msgtyp = 2  > 2에 해당하는 데이터만 받겠다.
[엄마,아빠,나,동생 중 아빠에 해당하는 데이터만 순서대로 받겠다.]
msgtyp = -3 > 3하고 같거나 3보다 작은 타입중 가장 작은 타입을 받겠다. [ 잘 사용 X]

---------------------------------------
Why msgtyp?

multiplexing
메세지큐를 타입별로 계속 만드는 것은 메모리상 손실이 너무 크기 때문에
메세지타입을 정해서 하나의 큐로도 다양한 타입의 데이터의 공유가 가능하도록 한다.
줄은 같이 서있지만 분류되는 방식은 다르다. 각각의 타입별로

