Chapter 01

자료구조의 앞부분은 C++ 내용에 대한 복습이거나 프로그램 개발 방법론이다.

본격적인 자료구조가 나오지 않으니깐 천천히 차근차근 들으며 기본을 쌓아가라.

1. 프리컨디션과 포스트컨디션 (이전 조건과 이후 조건)
	일반적으로 프로그램을 작성할때 기본적으로 지켜야할 습관에 대한 내용이다.
	프리컨디션과 포스트컨디션의 목적은 함수를 호출할때 지켜야할 조건이다.

프로
그램 = 데이터 스트럭쳐(자료구조) + 알고리즘
프로그램엔 이 두가지가 들어있다.

데이터 스트럭쳐는 데이터를 조직적으로 관리하는 것
알고리즘은 데이터를 바탕으로 테스크를 해결하기 위한 과정의 집합이다.

 소프트웨어 개발 과정 - 7단계
	작업의 구체화 (Specification of the task)
	솔루션 디자인(설계) (Design of a solution)
	솔루션 구현[코딩] (Implementation(coding) of the solution)
	솔루션의 분석 (Analysis of the solution)
	테스트와 디버깅 (Testing and Debugging)
	유지/보수 (Maintenance and the evolution of the system)
	폐기처분 (Obsolescence)

		
 1.1 구체화, 디자인, 구현 (스페시피케이션, 디자인, 임플리멘테이션)
	구체와 단계에서는 문제를 정확히 정의하는 것이 필요하다.
	디자인 단계에서는 가짜코드인 슈도코드(pseudocode)로 작성될 수 있다.
	슈도코드로 작성된 디자인을 실제 코드로 코딩한다.

 프리컨디션과 포스트 컨디션
	코딩 습관
	프로그래머는 함수의 구현에 대해서 커뮤니케이션해야하지 구현방법에 대해서는 커뮤니케이션 할 필요
	없다. (함수도 마찬가지)
	함수가 어떻게 구현됐는지는 알려줄 필요없고 결과값만 커뮤니케이션하면 된다.
	[ 요구한 것에 대해서 그 요구를 수행한 방법에 대해서는 보고하지말고 요구의 결과값만 보고해라 ]
	프리컨디션은 함수가 호출되기 전에 만족되어야 하는 것이다. [입력에 대한 조건]
	포스트컨디션은 함수가 자기의 작업을 마친 후에 만족해야 하는 것이다. [출력에 대한 조건]
	코딩 스킬에 대한 이야기가 아니라 코딩 습관에 대한 얘기이다. 협업에 꼭 필요한 내용이다.
	//프리컨디션 : 함수가 시행되기 위해 지켜야하는 조건
	//포스트컨디션 : 함수가 하는 일
	
	프로그래머는 프리컨디션이 만족됐을때 포스트컨디션이 만족해야 한다는 것을 확실히 보장해야한다.
	다만 함수 호출 시 프리컨디션을 잘 확인해야한다. (호출 시 사전조건을 지키지 않으면 호출한 사람 과실)
	*함수를 작성할 때 프리컨디션과 포스트컨디션을 작성하는 습관을 꼭 들여야 한다.

	주의 깊은 프로그래머는 이 룰을 따른다.
		프로그래머는 사전조건이 위배되지 않도록 노력해주어야 한다. (자기 잘못은 아니지만)
		만일, 사전조건이 만족되지 않다면 그 즉시 종료시킨다.
		종료 시 에러 메세지를 출력하도록 한다.

		#include <cassert> [씨어서트]
		assert(); > 프리컨디션 위배 여부 확인 가능 [에러 메세지 출력 후 프로그램 종료]
		- 어써트는 매크로 함수(#define 으로 구성된 함수)이다.

*함수 작성시 사전조건, 사후조건을 작성하도록 하자.
*사전조건을 작성하였어도 assert() 매크로 함수를 이용하여 사전조건 위반 시 에러 출력, 종료가 가능하도록 하자

