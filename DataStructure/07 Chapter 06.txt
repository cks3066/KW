오늘은 6장으로 들어가는데요

C++ 가 제공하는 스탠다드 라이브러리를 사용하게 되는건데
온전히 C++를 위한 장이라고 볼 수 있겠습니다.

teplate, iterators, standard library 에 대해서 배울거에요

가장 일반화된 코드가 템플릿이라고 볼 수 있다.

컨테이너 속 모든 아이템을 전부 훑어보기 위한 커서같은 개념이다.

커서는 노드 포인터입니다.

노드 포인터의 개념이 랩핑된 것입니다.

템플릿에 관한 복습

탬플릿 펑션에 대해서 보겠습니다.

int maximun(int a, int b)
{
	if(a > b)
		return a;
	else
		return b;
}

이런 함수가 있는데

이것은 기본적으로 int 에 대한것입니다.

하지만 double 형 maximun, string 형 miximun 함수의 틀도 다를 것이 없을 것이다.

그런 경우 template 함수를 사용할 것이다.

template <typename T>  [T 라는 곳이 들어가는곳에 형 타입을 넣을 것이다.]
T maximum(T a, T b)
{
	if(a > b)
		return a;
	else
		return b;
}

이것은 정의되지 않지만
cout << maximun(1,2);
이렇게 선언되는 순간 템플릿 함수가 정의되는 것이다.

template <typename T, typename SizeType>
T array_max(T data[], SizeType n)
{
	SizeType i;
	T answer;
	
}

이런식으로 두개의 파라미터를 설정해도 가능하다.

여기까지가 템플릿 함수에 대한 내용입니다.

그 다음 템플릿 클래스에 대해서 알아보겠습니다.

수많은 클래스들은 템플리시 클래스로 선언되어 있다. stl 안에서

멤버 변수 데이터 형수를 여러개를 가질 수 있다.

template <typename T>
class bag
{
public:
	typedef T value_type;
	...
	bool insert(const t& entry);
	...
};

template <class T>
bool bag<T>::insert (const T& entry);

템플릿 클래스의 사용법에 대해서는 조금 더 봐야겠다. 확실하게 이해가 된 느낌은 아니다.

선언하는 부분을 보면
bag<char> letterBag
이런식으로 꺽새안에 데이터 타입을 써주는 것이다.

이제 STL을 사용할 준비가 되어있다.
iterator 라는 것을 가지고 있다.
스탠다드 템플릿 라이브러리를 표준 C++ 은 제공하고 있따.

STL 의 수많은 클래스중에 multiset 이라는 것이 있는데 그것이 우리가 만든 지금까지의 가방과 비슷하다.

set : 순서가 동일하고 모든 값이 달라야된다.
지금까지 우리가 만든것은 동일한 값이 들어가도 됐지만 이것은 좀 다르다.

multiset 클래스 템플릿
백이 가지고 있는 멤버들과 비슷하다
count, erase, size 등등

여러분이 주의할게 있는데 insert(const value_type& enty)이것인데
리턴타입이 itertator이다.

iterator insert(const value_type& enty)

iterator 는 무엇이냐
커서 포인터와 비슷한데 사용자가 직접 보지 못하도록 숨겨놓은것이다.
컨테이너 속 모든 아이템을 훓어 볼 수 있도록 하는 포인터의 역할을 한다.

내용을 바꿀수도 있는 경우도 있지만 자료구조에 따라 다르다.

가방안에 있는 숫자들을 왔다갔다 하면서 볼 수 있는것

iterator 사용법
1. begin
begin() 이라는 멤버함수가 있어서 
비긴으로 iterator 를 얻어올 수 있다.
multiset 이라는 템플릿 클래스 안에 iterator 라는 클래스로 정의되어있다.
multiset<string>::iterator iter;
iter = actors.begin();
actors 의 첫번째 이터레이터를 얻어올 수 있다.
첫번째 이터레이터의 값을 가져올 수 있다.

놀랍게도 멀티셋은 크기 순서대로 아이템이 정렬되어있습니다.
단 operator < 가 아래의 3가지 조건에 맞아야한다.
irreflexivity	일 리플렉서버티	비반사적성  a = b 이면 a < b 이면안되고 b < a 면 안된다.
antisymmesty	안티 시메스트리	비대칭성	   a != b 이면 a < b 이거나 b < a 이다.
tansivity		트랜지비티	추이적관계  a < b 이고 b < c 이면 a < c 이다.

위의 3가지 조건에 맞게 operator < 가 정의되어있으면
크기 순서대로 순서가 정해진다.

2. * operator
	현재 이터에이터의 요소를 접근할 수 있도록 하는 오퍼레이터
	값을 바꾸는 것은 허용되지 않는다.

	multiset<string>::iterator iter;
	iter = 멀티셋이름.begin();
	cout << *iter << endl; 		포인터의 값을 불러오는 것과 비슷하게 생각하면됨

3. ++ operator
	다음을 가리키게 한다.
	multiset<string>::iterator iter;
	iter = 멀티셋이름.begin();
	++iter;

4. end()
	제일 끝에 있는 아이템 더 뒤에 새로운 공간을 만들어 마킹을 한뒤 그곳을 가리킴
	1 2 3 4 5 6 7 8 9 10  
	begin()		   V end()
	
	for (iter = 멀티셋이름.begin(); iter!=멀티셋이름.end(); ++iter) {
		cout << *iter << endl;
	}

이터레이터 사용만 익숙해지면 STL 을 사용하는 것이 매우 익숙해 질 것입니다.

자료 구조에서 제공하는 STL 을 사용하기위해
템플릿을 복습하고 iterator 의 사용법에 대해서 알아보았습니다.

이제 멀티셋의 다른 멤버 함수들을 알아보겠습니다.

1. find(const value_type& target);
	타켓값을 같은 벨류값을 찾는다.
	첫번째 아이템부터 돌아가면서 찾는다.
	못찾으면 end() 반환
multiset<int> m;
multiset<int>::iterator position;
position = m.find(42)

2. erase(iterator i)
	i 가 가진 내용을 삭제하는 함수
position = m.find(42)
if (position != m.end())
	m.erase(position);

3. const iterator (const_iterator) 
	무언가를 상수화 한다(바꿀수없다)
	볼수만 있고 바꿀수 없다.
	이터레이터로 값을 바꾸는게 불가능하게 만드는것
const multiset<int> m;	상수 객체
multiset<int>::const_iterator cursor;	상수 이터레이터
for(cursor=m.begin(); cursor!=m.end(); ++cursor) {...}
		// 비긴과 엔드 return a const_iterator

------------------------------------------------------
이터레이터는 5가지 종류로 나눌수있다.
1. forward 	single
2. bidirectional	double
3. random access	single
4. input		강의 생략
5. output		강의 생략
-----------------------------------------------------
Forward Iterator
 디폴트, 카피, 어사인 생성자
 * 과 ++ 오퍼레이터
 == 과 !=
		이렇게 기본적으로 정의되어있습니다.

Bidirectional Iterator
 foward 이터레이에 backward 이터레이터 추가
 foward iterator 의 정의와 -- 도 추가

Random Access Iterator 
 랜덤하게 데이터에 접근할 수 있다.
	foward + backward
	어레이 노테이션 제공 p[i]
 *, ++, --, +=, -=, +, - 기본적으로 정의되어있음
 ==, != 정의

-----------------------------------------------------
노드 포인터를 이용해서 foward iterator 를 만들어 볼것입니다.

class node
{
public:
	typedef int value_type;
	...
{;

템플릿 버전
template <class T>
class node
{
public:
	typedef T value_type;
	...
};

template<class NodePtr, class SizeType>
NodePtr list_locate(NodePtr head_ptr, SizeType position)

노드 이터레이터 클래스
	프라이빗 영역안에 node 클래스를 가지게 되는
	노드 반족자 클래스는 현재의 (node<Item>*) 이라고 불리는 멤버 변수를 가진다. 
	리스트 안에서 현재의 노드에 접근할 수 있게해주는 node<Item>*
template<class Item>
class node Iterator:public std::iterator<std::forwad_Iterator_tag,Item> // std 안에있는 iterator 상속
{
private:
	node<Item>* current;
	...
};

1. constructor
node_iterator(node<Item>* initial = NULL)
{
	current = initial;
}

2. * operator
Item& operator *() const
{
	return current->data();
}

3. ++ operator
node_iterator& operator ++() //prefix ++
{
	current = current->link();
	return *this;
}

node_iterator& operator ++(int) //postfix ++ 괄호안에 인트쓰는 것이 약속
{
	node_iterator original(current);
	current = current->link();
	return original; // 복사본 리턴
}
4. == operator
bool operator ==(const node_iterator other) const
{
	return current == other.current;
}

5. != operator
bool operator !=(const node_iterator other) const
{
	return current != other.current;
}

