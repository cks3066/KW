Stacks

특수목적

	7장에서는 스택 데이터 타입을 소개한다.

	몇 개의 스택 프로그램의 예제가 주어진다.

스택과 STL 스택 소개

TOP 이라고 불리는 한쪽 꼭대기로만 데이터가 들어가고 나오게 되는 데이터 구조

상자의 모양을 생각하면 됨 Push와 pop 사용
높은 수준의 데이터 스트럭쳐 [고급화된 개념]

Last-In First-Out (LIFO) - 정확한 스택의 설명		<> First-In Last-Out (FIFO) - queue 설명
[마지막에 들어간 녀석이 제일 먼저 나온다]	리포				피포


STL statck class template

pop()
push(const Item& entry)
empty()
size()
top()
etc

대표적인 스택의 에러들
stack overflow
	full stack 에서 아이템을 push 할때 생기는 에러
stack underflow
	empty stack 에서 아이템을 pop 할때 생기는 에러

Stack application
	완전한 수식 계산기를 만드는 것이 목적
	
	Balanced Parenthese (균형잡힌 소괄호)

	괄호가 제대로 쳐져있는지 알아보기 위해 스택을 이용할 수 있다.
	스택으로 들어온 문자열들이 제대로 괄호 치기가 잘 되어있는지 스택을 이용해 확인
	example
		((x + y * (x + y)) * (A+B)) - balanced
		((x + y * (x + y) * (A + b)) - nor balanced

	어떻게 확인하는걸까?
		1. read in the next characher c in the experssion
		입력받은 표현의 다음 char 를 읽는다
		2. if c is nor a paranthesis, go to 1
		만약 괄호가 아니라면 1번으로 돌아간다
		3. else if c is a left parenthesis, push it onto stack
		만약 왼쪽 괄호라면 '(' 스택에 값을 넣고 1번을 다시 진행
		4. else if c in a right parenthesis, pop the corresponding left parenthesis form the stack
		만약 오른쪽 괄호 ')' 라면 스택에서 ( 을 꺼낸다.
		5. repeaet the same process until te end of the expression is reached
		마지막 문자열까지 같은 작업을 반복한다. 
		만약 남아있는 (와 ) 이 있다면 남아있는 갯수 만큼 paranthesis 가 많은 것
		unbalanced

		소, 중 , 대괄호도 같은 논리로 가능 ( 스택에 값을 넣다가 일치하지 안으면 오류 )
		
	Evaluating Arithmetic Experssion
		완전히 괄호치기가 된 수식
	example : ((( 6 + 9) / 3) * ( 6 - 4))
		연산자 우선 순위가 없다고 가정, 원하는 값을 도출하기 위해 모든 값에 괄호를 넣어줌

	
	number 스택과 operator 스택 | 두개의 스택 사용
	((( 6 + 9) / 3) * ( 6 - 4))

	왼쪽 괄호 무시 
	
	6	+
	9
	숫자 연산자 숫자 스택에 넣음
	) 를 만나면 액션( 두개의 넘버와 연산자를 이용해서 계산 뒤 number 스택 값을 바꿈
	꺼내는 순서 중요

	완전히 괄호쳐진 연산은 ) 를 이용해 손쉽게 계산할 수 있다.

	#include <iostream>
	#include <stack>
	#include <cctype>
	#include <cstring>

	double read_and_evaluate(istream& ins)
	{
		const char DECIMAL = '.';
		const char RIGHT_PARENTHESIS = ')';

		stack<double> numbers;
		stack<char> operations;
	double number;
	char symbol;
	...	
	while (ins && ins.peek() != '\n')	// 입력이 끝나지 않았고 입력이 \n 이 아니면
	{
		if(isdigit(ins.peek()) || ins.peek() == DECIMAL)) { ... }
		else if (strchr("+-*/", ins.peek()) != NULL) {...}
		else if (ins.peek() == RIGHT_PARENTHESIS {...}
		else { ... }
	}
		return numbers.top();
	}


	while (ins && ins.peek() != '\n')
	{
		if(insdit(ins.peek()) || ins.peek() == DECIMAL))
		{
			ins >> number;
			numbers.push(number);
		}
		else if (strchr("+-*/", ins.peek()) != NULL) 
		{
		ins >> symbol;
		operations.push(symbol);
		}
		else if (ins.peek() == RIGHT_PARENTHESIS 
		{
			ins.ignore();
			evaluate_stack(numbers, operation);
		}
		else
			ins.ignore();
	}
	return numbers.top();
}

void evaluate_stack(stack<double>& numbers, stack<char>& operaations)
{
	double operand1, operand2;
	operand2 = numbers.top();
	number.pop();
	operand1 = numbers.top();
	numbers.pop();

	switch(opeartions.top()) 
	{
		case '+' number.push(operand1 + operand2); break;
		case '-' number.push(operand1 - operand2); break;
		case '*' number.push(operand1 * operand2); break;
		case '/' number.push(operand1 / operand2); break;
	}
	operation.pop();
}

------------------------------------------------------------------------------------
오늘은 무엇으로 시작하면 스택이라는 것을 실제
어레이를 통해 만들어 보겠습니다.
다이나믹 어레이를 안쓰고 스태틱 어레이를 쓰겠습니다.

data[CAPACITY] array
used - number of items

template <class Item>
class stack
{
private:
	Item data[CAPACITY];
	size_t used;
	...
}

------------------------------------------------
constructor

template<class Item>
stack<Item>::stack()
{
	used = 0;
}
-------------------------------------------------
push

template<class Item>
void stack<Item>::push(const Item& entry)
{
	assert(size() < CAPACITY);
	data[used++] = entry;
}
--------------------------------------------------
pop

template<class Item>
void stack<Item>::pop()
{
	assert( !empty());
	--used;
}
---------------------------------------------------
top

template<class Item>
Item stack<Item>::top() const
{
	assert( !empty());
	return data[used-1];
}
---------------------------------------------------
empty

template<class Item>
bool stack<Item>::empty() const
{
	return used == 0;
}
---------------------------------------------------
size

template<class Item>
size_t stack<Item>::size() const
{
	return used;
}
------------------------------------------------------------

링크드 리스트로 만들어 보겠습니다. stack 을
헤드를 탑으로 두면되다.
엔트리가 head에 푸쉬되고 탑이 된다.

template<class Item>
class stack
{
private:
	node<Item> *top_ptr;
...
}

-------------------------------------------------------------
copy constructor

template<class Item>
stack<Item>::stack(const stack<Item>& source)
{
	node<Item>* tail_ptr;
	
	list_copy(source.top_ptr, top_ptr, tail_ptr);
}

----------------------------------------------------
push

template<class Item>
void stack<Item>::push(const Item& entry)
{
	list_head_insert(top_ptr, entry);
}

---------------------------------------------------
pop

template<class Item>
void stack<Item>::pop()
{
	assert(!empty());
	
	list_head_remove(top_ptr);
}

------------------------------------------------
empty

template<class Item>
bool stack<Item>::empty() const
{
	return top_ptr == NULL;
}
---------------------------------------------------
top

template<class Item>
Item stack<Item>::top() const;
{
	assert(!empty());
	
	return top_ptr->data();
}
--------------------------------------------------
Arithmetic Experssions: (수식)
1. Infix notation
중간 operator
	(3 + 4) * 7
2. Prefix notation
먼저 operator
	* + 3 4 7
3. Postfix notation			Prefix 와 Postfix 는 괄호가 없다
나중 operator
	3 4 + 7 *

Infix -> Postfix	
우리는 infix 를 postfix 로 바꿔서 값을 얻어낼것이다.

	postfix
	3 2 + 7 * 
	5 저장
	5 7 *
	값 저장 및 출력

내가 읽은 녀석 숫자면 스택에 넣겠다
내가 읽은 녀석이 오퍼레이터면
스택에서 2개의 값을 꺼내서 연산을 한뒤 스택에 넣겠다.

숫자면 스택 -> 오퍼에리터면 계산 후 스택

이제 infix 를 postfix 롤 바꾸는 법에 대해서 알아보겠다.

완전히 괄호 쳐진(filly parenthesized) 수식에 대해
((( A + 7 ) * ( B / C )) - ( 2 * D ))
가장 깊은 곳의 왼쪽부터 계산
A 7 + B C / * @ D * -

괄호를 넣습니다.
( ( ( +
A는 출력( 어레이제 저장 가능)
7출력
')'를 만나면 top에 있는 오퍼레이터 + 출력
'(' 하나 삭제
( ( * (
B 출력
( ( * ( /
C 출력
) 룰 만나면 / 출력 '(' 삭제
) 를 만나면 * 출력 '(' 삭제
- 저장
( 저장
2 출력  * 저장
D출력
) 만나면 * 출력 ( 삭제
)를 만나면 - 출력 ) 삭제

자기 보다 낮은건 꺼내지 않는다.
높거나 같으면 꺼낸다.

3 X * Y 12 - Z