오늘은 queue 에 대해서 배워보겠습니다.

[	][	][	][	]

front			back

dequeue(pop)을 하면 앞에서 빠지고
enqueue(push)를 하면 뒤에서 부터 들어온다.

First-In First Out(FIFO) 구조를 갖는다.

스택은 LIFO, 큐는 FIFO
--------------------------------------------
함수로는
pop
push
empty
size
front	꺼내기 직전에 보는것 [스택은 top을 썼었죠)

-----------------------------------------
발생 가능한 에러
queue overflow	- 정적인 형태를 가질때
queue underflow
-----------------------------------------
Recognuzing Palindromes

Palindrome(팰런드롬)
-a string that reads the same forward and backward [거꾸로 해도 이효리]
뒤집어도 똑같은 문자열
	radar,	Able was I ere I saw Elba,	eye, 	기러기

뒤집어도 같은 문자열인지 queue 를 통해서 알아보겠다!

[r]
[a]
[d]				[r][a][d][a][r]
[a]
[r]

back과 front 가 같으면 삭제
이런식으로 stack과 queue를 이용하면 손쉽게 해결 가능

------------------------------------------------
queue applications 큐 응용프로그램
FCFS(first come first service) 먼저 온사람 먼저 챙겨

-car wash simulation 세차장 시뮬레이션

washer
	- the amount of time needed to wash a car
	- the amount of time left to complete washing a car
bool_source	
	- the probability of a customer arriving within a second
average	
	- how many numbers have been given to the averager
	- the sum of all numbers given to the averager

---- bool_source 추가 설명
	true	V	V      V 	      V  V
		-1-2-3-4-5-6-7-8-9-10-11-12
	false	    V V V    V V    V V
 
세차 시뮬레이트( 세차 시간, 초당 차 도착 확률, 총 시뮬레이션 시간)
void car_wash_simulate(wash_time, arrival_prob, total_sim_time)
1.  unsigned integers 큐를 선언한다 ( 고객 도착 시간 )
2. for(cur_sec = 1; cur_sec <= total_sim_time; ++cur_sec)
	{...} * 현재 시간이 시뮬레이션 끝날때까지 흘러갈때 ... 을 시행한다.
3. 시뮬레이션이 완성된다. 얼마나 많은 차들이 세차를 했는지 평균을 출력하고 고객들이 평균적으로 기다린
시간을 출력한다.

2번의 ...에 대해서
bool_source는 해당 cur_sec 에 차가 도착했는지 확률에 따라서 체킹함
만약 차가 도착했다면 queue에 cur_sec 을 넣어줌
대기하고 있는차가 있는데 washer가 비어있으면 queue에서 꺼내서 washer로 보내줌
queue의 시간에 wash_time을 더해준뒤 average를 위해 보내줌
다시 반복

class washer {
public :
	washer(unsigned int s = 60);
	void one_second();
	void start_washing();
	bool is_busy() const { return(wash_time_left > 0) ;}
private :
	unsigned int seconds_for_wash;
	unsigned int wash_time_left;
};

class bool_source {
public:
	bool_source(double p = 0.5);
	bool query() const;
private:
	double probability;
};  

class averager {
public :
	averager();
	void next_number(double value);
	std::size_t how_many_numbers() const	{ return count;}
	double averager() const;
private:
	std::size_t count;
	double sum;
};

------ implements
washer::washer(unsigned int s)
{
	seconds_for_wash = s;
	wash_time_left = 0;
}

void washer::one_second()
{
	if(is_busy())
		--wash_time_left;
}

void washer::start_washing()
{
	assert(!is_busy());
	wash_time_left = seconds_for_wash;
}

bool_source::bool_source(double P)
{
	assert( p >= 0);
	assert( p <= 1);
	probability = p;
}

bool bool_source::query() const
{
	return (rand() < probability *RAND_MAX);
}

averager::averager()
{
	count = 0;
	sum = 0;
}

void averager::next_number(double value)
{
	++count;
	sum += value;
}

double averager::average() const
{
	assert(how_many_numbers() > 0);
	return sum/count;
}

void car_wash_simulta(unsigned int wash_time, double arrival_prob, unsigned int total_times)
{
	queue<unsinged int> arrival_times;
	unsigned int next;
	bool_source arrival(arrival_prob);
	washer machine(wash_time);
	averager wait_times;
	unsigned current_second;
	.../for loop and output statement
}

for(current_second = 1; current_second <= total_time; ++current_second) {
	if(arrival.query())
		arrival_time.push(current_second);
	if((!machine.is_busy()) && (!arrival_times.empty())) {
		next = arrival_times.front();
		arrival_times.pop();
		wait_times.next_number(current_second - next);
		machine.start_washing();
	}
	machine.one_second();
}
// print the number of customers and the accerage waiting time

------------------------------------------------------------------------------------------
다음강의에서는 queue를 실제로 만들어보겠습니다.
------------------------------------------------------------------------------------------
queue 는 순서가 있는 자료구조, 뒤에서 들어와서 앞으로 나온다. First In 먼저들어가면 First Out 먼저 나온다
	palindrome 팰린드럼	car wash simulation
-----------------------------------------------------------------------------------------
Queue class 를 어떻게 만들것인가?
array와 linked list로 만들어보겠습니다.

staric array
1.	2개의 변수	first, last 이용
	[][][][first][][][][][last][][][][]
	어레이의 공간이 있음에도 first와 last가 사용하는 공간만 사용할 수 있는 메모리상 비효울성이 주됨
2. 	[first][][][][][][last][][][][]
	데이터를 사용하때마다 fist와 데이터를 앞으로 당겨줌
	모든 데이터를 움직이는 프로그램 작동 시간상 비효울성이 주됨
3. 	[][][][][][][][][]first][][][]last]
	[new data][][][][][][][][][first][][][][last]
	배열을 원형으로 생각하고 last를 0부터 집어넣음
	pop시 first+1이 first가 됨, last의 다음이 즉 처음부터 시작하는 값이 last가 됨
	[circular array approach] - first, last, count 가 필요함

linked list
	front_ptr	read_ptr	count
	front_ptr -> 4 -> 5 -> 2 -> read_ptr		[count 3]

------------------------------------------------------------------------------------------
priority queues
	프리패스권을 가진 유저들 처리하는 queue [우선순위대로]
	'in' order 와 'out' order 가 다르다.
	
first [3][8][2][1][5] last	[우선순위 : 높은 값]
	OUT : 8 5 3 2 1

priority_queue<Item>

	stl에 있는 priority_queue 는 reference 값을 return 한다.

-------------------------------------------------------------------------------------------
Deque : double ended queue
원래 queue 는 뒤에 넣고 앞에서 빼는 것인데
dequeue는 앞에서도 넣고 뺄 수 있고 뒤에서도 넣고 뺄 수 있다.

dq.push_front, push_back
dq.pop_front, pop_back